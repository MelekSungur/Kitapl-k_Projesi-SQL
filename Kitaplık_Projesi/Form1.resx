<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AElFTkSuQmCC
</value>
  </data>
</root>